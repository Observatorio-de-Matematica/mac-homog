/* matrix implemented by Lisp array */
amatd (a) :=
    a [0];

amatget (a, i, j) := (
    mode_declare (i, fixnum, j, fixnum),
    block (
        [d],
        d : amatd (a),
        d [i, j]
    )
);

amatset (a, i, j, x) := (
    mode_declare (i, fixnum, j, fixnum),
    block (
        [d],
        d : amatd (a),
        d [i, j] : x
    )
);

amatr (a) :=
    a [1];

mode_declare (function (amatr), fixnum);

amatc (a) :=
    a [2];

mode_declare (function (amatc), fixnum);

amattruncr (a, r) :=
    if r > amatr (a) then error ("amattruncr: too many rows", r)
    else a [1] : r;

mode_declare (function (amattruncr), fixnum);

amattruncc (a, c) :=
    if c > amatc (a) then error ("amattruncc: too many columns", c)
    else a [2] : c;

mode_declare (function (amattruncc), fixnum);

newamat (r, c) := (
    mode_declare (r, fixnum, c, fixnum),
    block (
        [a],
        a : make_array ('any, 3),
        a [0] : make_array ('any, r, c),
        a [1] : r,
        a [2] : c,
        a
    )
);

copyamat (a) :=
    block (
        [a2],
        a2 : newamat (amatr (a), amatc (a)),
        fillarray (amatd (a2), amatd (a)),
        a2
    );

mat2amat (m) :=
    block (
        [r, c, a],
        mode_declare (r, fixnum, c, fixnum),
        r : length (m),
        if r = 0 then c : 0
        else c : length (first (m)),
        a : newamat (r, c),
        fillarray (amatd (a), flatten (args (m))),
        a
    );

amat2mat (a) :=
    if amatr (a) = 0 then
        matrix ()
    elseif amatc (a) = 0 then
        apply ('matrix, makelist ([], amatr (a)))
    else
        genmatrix (
            lambda ([i, j], amatget (a, i - 1, j - 1)),
            amatr (a), amatc (a)
        );

/* main variable for gcd */
define_variable (gcd2var, 1, any);

/* gcd which returns [g, u, v, x0, y0], where
   g = gcd (x, y)
   u * x + v * y = g
   x0 * g = x, y0 * g = y */
gcd2 (x, y) :=
    block(
        [q, r, u, v, u1, v1, x1, y1],
        [x, y] : [rat (x), rat (y)],
        [x1, y1] : [num (x), num (y)],
        [u, u1, v, v1] : [1, 0, 0, 1],
        while y1 # 0 do (
            [q, r] : divide (x1, y1, gcd2var),
            [x1, y1] : [y1, r],
            [u, u1] : [u1, u - q * u1],
            [v, v1] : [v1, v - q * v1]
        ),
        if x1 # 0 then (
            [y1, x1] : content (x1, gcd2var),
            [u1, v1] : [denom (x), denom (y)],
            [u, v] : [u * u1 / y1, v * v1 / y1],
            [x, y] : [x / x1, y / x1]
        ) else (
            [x, y] : [1, 0]
        ),
        [x1, u, v, x, y]
    );

/* lcm */
lcm2 (x, y) :=
    block(
        [q, r, x1, y1],
        [x1, y1] : [rat (x), rat (y)],
        while y1 # 0 do (
            [q, r] : divide (x1, y1, gcd2var),
            [x1, y1] : [y1, r]
        ),
        if x1 # 0 then (
            x1 : second (content (x1, gcd2var)),
            x * y / x1
        ) else (
            0
        )
    );

/* Gauss elimination with "gcd pivoting" */
aelim_ctx (a) :=
    make_array ('fixnum, 1 + min (amatr (a), amatc (a)));

aelim (a, ctx) := (
    mode_declare (completearray (ctx), fixnum),
    block (
        [ip, p, q, x, y, g, u, v, x0, y0],
        mode_declare (ip, fixnum),
        ip : 0,
        for jp : 0 while ip < amatr (a) and jp < amatc (a) do (
            p : rat (amatget (a, ip, jp)),
            if p # 0 then (
                u : first (content (num (p), gcd2var)),
                v : first (content (denom (p), gcd2var)) / u,
                if v # 1 then (
                    for j : jp while j < amatc (a) do (
                        x : rat (amatget (a, ip, j)),
                        amatset (a, ip, j, rat (v * x))
                    )
                )
            ),
            for i : ip + 1 while i < amatr (a) do (
                p : rat (amatget (a, ip, jp)),
                q : rat (amatget (a, i, jp)),
                if q # 0 then (
                    [g, u, v, x0, y0] : gcd2 (p, q),
                    for j : jp while j < amatc (a) do (
                        x : rat (amatget (a, ip, j)),
                        y : rat (amatget (a, i, j)),
                        amatset (a, ip, j, rat (u * x + v * y)),
                        amatset (a, i, j, rat (- y0 * x + x0 * y))
                    )
                )
            ),
            if amatget (a, ip, jp) # 0 then (
                ctx [ip] : jp,
                ip : ip + 1
            )
        ),
        ctx [ip] : amatc (a),
        amattruncr (a, ip)
    )
);

mode_declare (function (aelim), fixnum);

aelim2 (a, ctx) := (
    mode_declare (completearray (ctx), fixnum),
    block (
        [l, jp, p, q, x, y, g, u, v],
        mode_declare (jp, fixnum),
        l : 1,
        for ip : amatr (a) - 1 step -1 while ip >= 0 do (
            jp : ctx [ip],
            p : rat (amatget (a, ip, jp)),
            l : lcm2 (l, p),
            for j : jp while j < amatc (a) do (
                x : rat (amatget (a, ip, j)),
                amatset (a, ip, j, rat (x / p))
            ),
            for i : ip - 1 step -1 while i >= 0 do (
                q : rat (amatget (a, i, jp)),
                if q # 0 then (
                    for j : jp while j < amatc (a) do (
                        x : rat (amatget (a, ip, j)),
                        y : rat (amatget (a, i, j)),
                        amatset (a, i, j, rat (- x * q + y))
                    )
                )
            )
        ),
        l
    )
);

asolve1 (a, ctx, s, k, ip1, j1) := (
    mode_declare (completearray (ctx), fixnum),
    mode_declare (k, fixnum, ip1, fixnum, j1, fixnum),
    block (
        [jp1, jp],
        mode_declare (jp1, fixnum, jp, fixnum),
        jp1 : -1,
        for ip : 0 while ip < ip1 do (
            jp : ctx [ip],
            for j : jp1 + 1 while j < jp do
                amatset (s, j, k, 0),
            amatset (s, jp, k, - amatget (a, ip, j1)),
            jp1 : jp
        ),
        for j : jp1 + 1 while j < j1 do
            amatset (s, j, k, 0),
        amatset (s, j1, k, 1),
        for j : j1 + 1 while j < amatc (a) do
            amatset (s, j, k, 0)
    )
);

asolve (a, ctx) := (
    mode_declare (completearray (ctx), fixnum),
    block (
        [s, k, jp1, jp],
        mode_declare (k, fixnum, jp1, fixnum, jp, fixnum),
        s : newamat (amatc (a), amatc (a) - amatr (a)),
        k : 0,
        jp1 : -1,
        for ip : 0 while ip <= amatr (a) do (
            jp : ctx [ip],
            for j : jp1 + 1 while j < jp do (
                asolve1 (a, ctx, s, k, ip, j),
                k : k + 1
            ),
            jp1 : jp
        ),
        s
    )
);

gcdelim (m) :=
    block (
        [a, ctx],
        mode_declare (completearray (ctx), fixnum),
        a : mat2amat (m),
        ctx : aelim_ctx (a),
        aelim (a, ctx),
        amat2mat (a)
    );

gcdsolve (m) :=
    block (
        [a, ctx, l],
        mode_declare (completearray (ctx), fixnum),
        a : mat2amat (m),
        ctx : aelim_ctx (a),
        aelim (a, ctx),
        l : aelim2 (a, ctx),
        [amat2mat (asolve (a, ctx)), l]
    );
